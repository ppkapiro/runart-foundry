name: Briefing Status Publish

on:
  push:
    branches:
      - main
    paths:
      - 'docs/live/**'
      - 'docs/archive/**'
      - 'docs/_meta/**'
      - 'scripts/gen_status.py'
      - 'tools/render_status.py'
      - 'tools/commits_to_posts.py'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-briefing-status:
    name: Update Briefing Status & Posts
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Hardening: evitar jobs colgados
    # Rate limiting: evitar loops infinitos y ejecuciones concurrentes
    if: |
      github.event.head_commit.author.name != 'github-actions[bot]' &&
      github.run_attempt == 1
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50  # Necesario para git log en commits_to_posts.py
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jinja2 jsonschema
      
      - name: Step 1 — Generate status.json
        id: gen_status
        run: |
          echo "🔄 Generando docs/status.json..."
          python3 scripts/gen_status.py
          
          if [ ! -f docs/status.json ]; then
            echo "❌ ERROR: status.json no generado"
            exit 1
          fi
          
          echo "✅ status.json generado exitosamente"
          cat docs/status.json
      
      - name: Step 1.5 — Validate JSON schema
        id: validate_schema
        run: |
          echo "🔍 Validando esquema de status.json..."
          python3 tools/validate_status_schema.py
          echo "✅ Esquema validado correctamente"
      
      - name: Step 2 — Render status page
        id: render_status
        run: |
          echo "🔄 Renderizando apps/briefing/docs/status/index.md..."
          python3 tools/render_status.py
          
          if [ ! -f apps/briefing/docs/status/index.md ]; then
            echo "❌ ERROR: status/index.md no renderizado"
            exit 1
          fi
          
          echo "✅ Página de estado renderizada"
      
      - name: Step 3 — Generate auto-posts
        id: generate_posts
        run: |
          echo "🔄 Generando posts automáticos de últimas 24 horas..."
          python3 tools/commits_to_posts.py --since-hours=24
          
          # Contar posts generados
          posts_count=$(find apps/briefing/docs/news -name "*.md" -type f | wc -l)
          echo "posts_count=${posts_count}" >> $GITHUB_OUTPUT
          echo "✅ Posts generados: ${posts_count}"
      
      - name: Step 4 — Validate frontmatter
        id: validate
        run: |
          echo "🔄 Validando frontmatter de status y posts..."
          
          # Validar status page (debe tener frontmatter válido)
          if ! grep -q "^---$" apps/briefing/docs/status/index.md; then
            echo "❌ ERROR: status/index.md sin frontmatter"
            exit 1
          fi
          
          # Validar posts (cada uno debe tener frontmatter)
          for post in apps/briefing/docs/news/*.md; do
            if [ -f "$post" ] && ! grep -q "^---$" "$post"; then
              echo "❌ ERROR: $post sin frontmatter"
              exit 1
            fi
          done
          
          echo "✅ Validación de frontmatter completada"
      
      - name: Step 4.5 — Canary build (MkDocs --strict)
        id: canary_build
        run: |
          echo "🔍 Canary build: verificando que MkDocs pueda compilar..."
          
          # Instalar dependencias si es necesario
          if [ -f apps/briefing/requirements.txt ]; then
            pip install -r apps/briefing/requirements.txt
          else
            pip install mkdocs mkdocs-material
          fi
          
          # Build con --strict (falla si hay warnings)
          cd apps/briefing
          mkdocs build --strict
          
          if [ $? -eq 0 ]; then
            echo "✅ Canary build exitoso"
          else
            echo "❌ ERROR: MkDocs build falló"
            exit 1
          fi
      
      - name: Step 5 — Commit changes (if any)
        id: commit
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Añadir archivos generados
          git add docs/status.json
          git add apps/briefing/docs/status/index.md
          git add apps/briefing/docs/news/*.md
          
          # Verificar si hay cambios
          if git diff --staged --quiet; then
            echo "ℹ️  No hay cambios para commitear"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Commit con [skip ci] para evitar loop
          commit_hash=$(git rev-parse --short HEAD)
          git commit -m "chore(briefing): update status + auto-posts [skip ci]

          - Updated status.json (ref: ${commit_hash})
          - Rendered apps/briefing/docs/status/index.md
          - Generated ${{ steps.generate_posts.outputs.posts_count }} auto-posts
          
          Generated by: .github/workflows/briefing-status-publish.yml"
          
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "✅ Cambios commiteados"
      
      - name: Step 6 — Push changes
        if: steps.commit.outputs.has_changes == 'true'
        run: |
          echo "🔄 Pushing cambios a main..."
          git push origin main
          echo "✅ Push completado"
      
      - name: Step 7 — Log execution
        if: always()
        run: |
          echo "📝 Registrando ejecución en docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md..."
          
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          commit_hash=$(git rev-parse --short HEAD)
          
          cat >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md << EOF
          
          ---
          
          ## Run — ${timestamp}
          
          **Commit:** \`${commit_hash}\`  
          **Status:** ${{ job.status }}  
          **Posts generados:** ${{ steps.generate_posts.outputs.posts_count }}  
          **Cambios commiteados:** ${{ steps.commit.outputs.has_changes }}
          
          ### Logs
          
          - Step 1 (gen_status): ${{ steps.gen_status.outcome }}
          - Step 2 (render_status): ${{ steps.render_status.outcome }}
          - Step 3 (generate_posts): ${{ steps.generate_posts.outcome }}
          - Step 4 (validate): ${{ steps.validate.outcome }}
          - Step 5 (commit): ${{ steps.commit.outcome }}
          
          EOF
          
          git add docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
          git commit -m "chore(meta): log briefing status publish [skip ci]" || true
          git push origin main || true
          
          echo "✅ Ejecución registrada"
      
      - name: Auto-Rollback on Failure
        if: failure()
        run: |
          echo "❌ Fallo detectado — Ejecutando auto-rollback..."
          python3 tools/auto_rollback.py
          
          rollback_status=$?
          if [ $rollback_status -eq 0 ]; then
            echo "✅ Rollback completado exitosamente"
            
            # Push cambios de rollback
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git push origin main || echo "⚠️  No se pudo hacer push del rollback"
            
            # Registrar rollback en PIPELINE_RUN.md
            timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            commit_hash=$(git rev-parse --short HEAD)
            echo "" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
            echo "**Auto-rollback ejecutado:** OK — ${timestamp} (commit: ${commit_hash})" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
            git add docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
            git commit -m "chore(meta): log auto-rollback [skip ci]" || true
            git push origin main || true
          else
            echo "❌ Rollback fallido (código: ${rollback_status})"
            echo "**Auto-rollback ejecutado:** FAIL — $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> docs/_meta/BRIEFING_STATUS_PIPELINE_RUN.md
          fi
          
          # Enviar alerta de fallo
          python3 tools/notify.py \
            --channel=slack \
            --title="Briefing Status Publish Failed" \
            --message="Auto-rollback ejecutado. Job: ${{ job.status }}" \
            --level=ERROR \
            || echo "⚠️  Notificación Slack no disponible"
          
          python3 tools/notify.py \
            --channel=discord \
            --title="Briefing Status Publish Failed" \
            --message="Auto-rollback ejecutado. Job: ${{ job.status }}" \
            --level=ERROR \
            || echo "⚠️  Notificación Discord no disponible"
      
      - name: Summary
        if: always()
        run: |
          echo "## 🎉 Briefing Status Publish — Completado" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Posts generados:** ${{ steps.generate_posts.outputs.posts_count }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cambios commiteados:** ${{ steps.commit.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Archivos actualizados" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/status.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`apps/briefing/docs/status/index.md\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`apps/briefing/docs/news/*.md\` (${{ steps.generate_posts.outputs.posts_count }} posts)" >> $GITHUB_STEP_SUMMARY
